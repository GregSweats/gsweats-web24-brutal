# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration


###
# REAL WORLD RESULTS
# @gsweats // www.gsweats.ca
#
# __WARN  git_cliff_core::changelog > You are using an experimental feature!__
# Because of GitHub integrations?
#   "[GitHub]...now experimentally available with the 2.0.0 version of git-cliff!"
#   Source: https://git-cliff.org/blog/2.3.0#-gitlab-integration
###

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n

This has been generated by [git cliff](https://git-cliff.org/), also at @orhun/git-cliff
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction

###
# GH LINKS
# WARNING: Causes EXPERIMENTAL WARNING from `GIT CLIFF...` CLI
# https://github.com/orhun/git-cliff/blob/main/examples/github.toml
###
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }}
            {# 2 spaces for indnent #} {# #} - (_[{{ commit.id | truncate(length=7, end="") }}{% if commit.github.username %} by @{{ commit.github.username }}{%- endif -%}](https://github.com/GregSweats/gsweats-web24-brutal/commit/{{ commit.id }}))_
            {# source: https://github.com/orhun/git-cliff/blob/main/examples/github.toml #}
            {% if commit.github.pr_number %} in \
                {# 4 spaces for indnent #} {# #} {# #} {# #} - [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }}) \
            {%- endif %}
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
{%- macro remote_url() -%}
    https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                {{ self::remote_url() }}/compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: {{ self::remote_url() }}/compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff [cliff.toml] -->
"""
# remove the leading and trailing whitespace from the templates
trim = true


###########
### /// ###
###########

[git]

# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit (omg why?! lolz... @GregSweats 2024-06-26 at 02:16:04 MDT (GMT -06:00))
split_commits = false
# regex for preprocessing the commit messages
# commit_preprocessors = [
#     # remove issue numbers from commits
#     { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
# ]
# regex for parsing and grouping commits
# commit_parsers = [
#     { message = "^.*: add", group = "Added" },
#     { message = "^.*: support", group = "Added" },
#     { message = "^.*: remove", group = "Removed" },
#     { message = "^.*: delete", group = "Removed" },
#     { message = "^test", group = "Fixed" },
#     { message = "^fix", group = "Fixed" },
#     { message = "^.*: fix", group = "Fixed" },
#     { message = "^.*", group = "Changed" },
# ]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"

###
# W:\www\gsweats-web24-brutal [trunk ≡ +3 ~3 -0 !]> git tag
# v0.1.0
# v0.1.1
# v0.1.2
# v0.1.3
# W:\www\gsweats-web24-brutal [trunk ≡ +3 ~3 -0 !]>
###

# regex for skipping tags
# skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
# ignore_tags = ""

# sort the tags topologically
# This can also be achieved by using the --topo-order command line flag.
# > If set to true, tags are processed
# > in topological order instead of chronological.
# > Source: https://git-cliff.org/docs/configuration/git/#topo_order
topo_order = false

# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
